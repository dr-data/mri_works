AbsX:
   functionality: "Generate an abscissa list from xmin to xmax in steps of delta_x.
                  Example (xmin=0.0, xmax=10.0, delta_x=0.1) --> [0.0, 0.1, ...., 9.9, 10.0]"
   xmin: (float) minimum value
   xmax: (float) maximal value
   delta_x: (float) deviation of x
   outAbscissa: (list of float) list of abscissa of x
   dependencies: Numpy

Choose_directory:
   functionality: Open a dialog box from which the user can select a directory.
   RepDefault: (path) default directory
   title: (string) dialog box title
   filePath: (path) path of the selected directory
   
Choose_file:
   functionality: Open a dialog box from which the user can select a file.
   fileDefault: (path) default file
   extension: (string) file name filtering (ex '*.jpg' '*.txt' '.nii .json ')
   title: (string) dialog box title
   filePath: (path) path of the selected file
   
exponential:
   functionality: Generates a MRI exponential function (T1, T2 or TI) with or without shift.
   amplitude: (float) amplitude (a) of function
   decay: (float) decay (b) of function (in ms)
   shift: (float) shift (c) of function
   function: "(enumerate) list of possible function :
               'a*exp(-bx)', 'a*exp(-bx)+c',
               'a*(1-exp(-bx))', 'a*(1-exp(-bx))+c',
               'a*(1-2*exp(-bx))', 'a*(1-2*c*exp(-bx))')"
   x: (list of float) abscissa x
   outFunction: (list of float) out of function selected
   dependencies: Numpy
   
fetch_atlas_harvard_oxford:
   functionality: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.html
   dependencies: Nilearn
   
fetch_atlas_msdl:
   functionality: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_atlas_msdl.html
   dependencies: Nilearn
   
fetch_atlas_smith_2009:
   functionality: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_atlas_smith_2009.html
   dependencies: Nilearn
   
fetch_neurovault_motor_task:
   functionality: https://nilearn.github.io/modules/generated/nilearn.datasets.fetch_neurovault_motor_task.html
   dependencies: Nilearn
   
FloatToInt_array:
   functionality: "Allows the conversion of a float array to an integer array.
                   Example  [[0.1] , [1.1] , [2.2]] --> [[0] , [1] , [2]]"
   arrayFloat : (array of float) array of floating values
   outArrayInt: (array of integer) array of integer values
   
FloatToInt_list:
   functionality: "Allows the conversion of a float list to an integer list.
                   Example  [0.1 , 1.1 , 2.2 ] --> [0 , 1 , 2]"
   listFloat : (list of float) list of floating values
   outListInt: (list of integer) list of integer values
   
FloatToInt_simple:
   functionality: "Allows the conversion of a float number to an integer number.
                   Example  1.1 --> 1"
   inFloat: (float) float number
   outInt: (integer) integer number
   
FloatToString:
   functionality: "Allows the conversion of a floating number to string.
                  Example 1.1 --> '1.1'"
   inFloat: (float) float number
   outString: (string) string of float number
   
fsl_ApplyMask:
   functionality: https://nipype.readthedocs.io/en/0.12.0/interfaces/generated/nipype.interfaces.fsl.maths.html
   
IntToFloat_array:
   functionality: "Allows the conversion of an integer array to a floating array.
                  Example [[0] , [1] , [2]] --> [[0.0] , [1.0] , [2.0]]"
   arrayInt: (array of integer) array of integer values
   outArrayFloat: (array of float) array of floating values
   
IntToFloat_list:
   functionality: "Allows the conversion of an integer list to a float list.
                  Example [0 , 1 , 2] --> [0.0 , 1.0 , 2.0]"
   listInt: (list of integer) list of integer values
   outListFloat: (list of float) list of floating values
   
IntToFloat_simple:
   functionality: "Allows the conversion of an integer number to a float number.
                  Example 2 --> 2.0"
   inInt: (integer) list of integer values
   outFloat: (float) list of floating values
   
IntToString:
   functionality: "Allows the conversion of a integer number to string.
                  Example 1 --> '1'"
   inInt: (integer) integer number
   outString: (string) string of integer number  

ListOfInt:
   functionality: Create a list of integer number 0 to n-1.
   n: (integer) an integer number
   serie_int: (list of integer) a list of integer number 0 to n-1

NlargestInArray:
   functionality: Check the n largest value in array input.
   in_array: (array of float) array input
   n: (integer) number of desired largest values
   listMax: (list of float) list of n largest values of in_array
   
NsmallestInArray:
   functionality: Check the n smallest value in array input.
   in_array: (array of float) array input
   n: (integer) number of desired smallest values
   listMin: (list of float) list of n smallest values of in_array
   
Plot_anat:
   functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_anat.html
   dependencies: Nilearn

Plot_epi:
   functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_epi.html
   dependencies: Nilearn
   
Plot_glass_brain:
   functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_glass_brain.html
   dependencies: Nilearn

Plot_img:
   functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_img.html
   dependencies: Nilearn
   
Plot_prob_atlas:
   functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_prob_atlas.html
   
Plot_roi:
   functionality: https://nilearn.github.io/modules/generated/nilearn.plotting.plot_roi.html
   dependencies: Nilearn
     
trigonometric:
   functionality: "Generate a trigonometric function (cos, sin, tan, arccos, arcsin, arctan). 
                     y = f(x+angle)"
   angle : (float) shift angle
   function : "(enumerate) list of possible function :
               'sin(x)', 'cos(x)', 'tan(x)',
               'arcsin(x)', 'arccos(x)', 'arctan(x)'"
   x_degree : (list of float) abscissa x in degree
   outFunction : (list of float) out of function selected
   dependencies: Numpy
   
x_Equal_y:
   functionality: Check if x == y
   x: (float) a float number
   y: (float) a float number
   out: (boolean) check condition (True or False)
   
x_GreaterOrEqual_y:
   functionality: Check if x >= y
   x: (float) a float number
   y: (float) a float number
   out: (boolean) check condition (True or False)
   
x_Greater_y:
   functionality: Check if x > y
   x: (float) a float number
   y: (float) a float number
   out: (boolean) check condition (True or False)
   
x_is_None:
   functionality: Check if x == None
   x: (float) a float number
   out: (boolean) check condition (True or False)

x_LessOrEqual_y:
   functionality: Check if x &lt;&#61; y
   x: (float) a float number
   y: (float) a float number
   out: (boolean) check condition (True or False)

x_Less_y:
   functionality: Check if x &lt; y
   x: (float) a float number
   y: (float) a float number
   out: (boolean) check condition (True or False)

x_Not_Equal_y:
   functionality: Check if x != y
   x: (float) a float number
   y: (float) a float number
   out: (boolean) check condition (True or False)  
