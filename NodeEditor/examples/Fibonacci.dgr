[diagram]
constant=[A0] value=[50] format=[int] label=[A0] RectF=[(-911.4677216723378, 123.42277838723302, 87.0, 31.0)]
block=[U0] category=[Demos.Models] class=[Fibonacci] valInputs=[(['n'], ['Node(N0)'], ['n_out', 'n_1_out'], ['float', 'float'])] RectF=[(-233.91815081368688, -128.22634304377442, 150.0, 80.0)]
link=[N13] node=[U5:str_conc#Node#U7:stringIn_0]
link=[N0] node=[F0:in0#Node#U0:n]
link=[N1] node=[U0:n_out#Node#F0:out0]
link=[N2] node=[U0:n_1_out#Node#F0:out1]
link=[N3] node=[U1:serie_int#Node#F0:in0]
link=[N6] node=[F0:out0#Node#U3:list1]
link=[N7] node=[F0:out1#Node#U3:list2]
link=[N5] node=[U3:listDiv#Node#U2:list_0]
link=[N8] node=[F0:out0#Node#U2:list]
link=[N11] node=[A0:#Node#U1:n]
link=[N10] node=[U8:out_list_indexed#Node#U5:stringIn_0]
link=[N12] node=[U3:listDiv#Node#U8:list_in_float]
link=[N4] node=[U2:list_concat#Node#U6:data]
link=[N9] node=[U7:str_list#Node#U6:title]
link=[N14] node=[U1:serie_int#Node#U6:x]
block=[U2] category=[Tools.ArrayManipulation] class=[concatenateList_dyn] valInputs=[(['list', 'list_0'], ['Node(N8)', 'Node(N5)'], ['list_concat'], ['array_float'])] RectF=[(474.8161891216839, -164.44925908279703, 150.0, 80.0)]
block=[U7] category=[Tools.StringManipulation] class=[string_list_dyn] valInputs=[(['stringIn', 'stringIn_0'], ['Serial', 'Node(N13)'], ['str_list'], ['list_str'])] RectF=[(984.7740722705717, 197.51788214371336, 150.0, 80.0)]
block=[U5] category=[Tools.StringManipulation] class=[string_concatenat_dyn] valInputs=[(['stringIn', 'stringIn_0'], ['ratio = ', 'Node(N10)'], ['str_conc'], ['str'])] RectF=[(743.0896735814846, 223.2319070551285, 156.71875, 80.0)]
loopFor=[F0] inputs=[[[['in0', 'in', 'list_int'], ['in0', 'out', 'int']]]] outputs=[[[['out0', 'in', 'float'], ['out0', 'out', 'list_float']], [['out1', 'in', 'float'], ['out1', 'out', 'list_float']]]] listItems=[['U0']] RectF=[(-363.79942724082827, -246.05677939004715, 461.1015350854907, 315.1524718838574)]
block=[U1] category=[Generator.Integer] class=[ListOfInt] valInputs=[(['n'], ['Node(N11)'], ['serie_int'], ['list_int'])] RectF=[(-703.2550270236653, 101.43926167062838, 150.0, 80.0)]
block=[U3] category=[Tools.ListOperation] class=[DivideListValues] valInputs=[(['list1', 'list2'], ['Node(N6)', 'Node(N7)'], ['listDiv'], ['list_float'])] RectF=[(211.8206045768212, -60.395808931271134, 150.0, 80.0)]
block=[U8] category=[Tools.ListManipulation] class=[index_list_float] valInputs=[(['list_in_float', 'index'], ['Node(N12)', -1], ['out_list_indexed'], ['float'])] RectF=[(437.80729556285587, 223.39646835933289, 217.625, 80.0)]
block=[U6] category=[Matplotlib.MatplotCurve] class=[pyPlot2] valInputs=[(['data', 'x', 'title'], ['Node(N4)', 'Node(N14)', 'Node(N9)'], [], [])] RectF=[(1244.3899176693453, -4.659224139112212, 235.16346162362515, 279.98946074501197)]
comments=[] RectF=[(-949.1446844000774, 92.87659342931761, 172.76998574460515, 89.52015248851177)] text=['must be < or = 95 !!']
[execution]
[]
['U1', 'F0', 'U3', 'ThreadOn', 'U8', 'U2', 'ThreadOff', 'U5', 'U7', 'U6']
{'U6': ('Matplotlib.MatplotCurve', 'pyPlot2', "(['data', 'x', 'title'], ['U2:list_concat', 'U1:serie_int', 'U7:str_list'], [], [])"), 'U8': ('Tools.ListManipulation', 'index_list_float', "(['list_in_float', 'index'], ['U3:listDiv', -1], ['out_list_indexed'], ['float'])"), 'U3': ('Tools.ListOperation', 'DivideListValues', "(['list1', 'list2'], ['F0:out0', 'F0:out1'], ['listDiv'], ['list_float'])"), 'U5': ('Tools.StringManipulation', 'string_concatenat_dyn', "(['stringIn', 'stringIn_0'], ['ratio = ', 'U8:out_list_indexed'], ['str_conc'], ['str'])"), 'U7': ('Tools.StringManipulation', 'string_list_dyn', "(['stringIn', 'stringIn_0'], ['Serial', 'U5:str_conc'], ['str_list'], ['list_str'])"), 'U2': ('Tools.ArrayManipulation', 'concatenateList_dyn', "(['list', 'list_0'], ['F0:out0', 'U3:listDiv'], ['list_concat'], ['array_float'])"), 'U1': ('Generator.Integer', 'ListOfInt', "(['n'], [50], ['serie_int'], ['list_int'])")}
['U1:serie_int', 'U7:str_list', 'U2:list_concat', 'U3:listDiv', 'U8:out_list_indexed', 'A0:', 'F0:out0', 'U3:listDiv', 'F0:out1', 'F0:out0', 'U1:serie_int', 'U0:n_out', 'F0:in0', 'U5:str_conc']
{}
[]
[loopfor F0]
['F0:in0=U1:serie_int']
['U0']
{'U0': ('Demos.Models', 'Fibonacci', "(['n'], ['F0:in0'], ['n_out', 'n_1_out'], ['float', 'float'])")}
['U0:n_1_out', 'U0:n_out', 'F0:in0']
{}
['F0:out1=U0:n_1_out', 'F0:out0=U0:n_out']
